<?php

namespace pos\CoreBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    const ACCOUNT_TYPE_RETAILER = 'retailer';

    public function _parseRetailerUserProfiles($user, $retailer) {
        return array(
            'id' => $user->getId(),
            'retailer_id' => $retailer ? $retailer->getId() : '',
            'user_id' => $user->getUsername(),
            'shop_name' => $retailer ? $retailer->getName() : '',
//            'user_full_name' => $user->getFullName(),
//            'contact_name' => $retailer ? $retailer->getContactName() : '',
//            'contact_number' => $retailer ? $retailer->getContactPhone() : '',
            'address' => $retailer ? $retailer->getAddress() : '',
            'province' => $retailer ? $retailer->getProvince() : '',
            'city' => $retailer ? $retailer->getCity() : '',
//            'country_code' => $retailer && $retailer->getCountry() ? $retailer->getCountry()->getCountryCode() : 'vn',
//            'dial_code' => $retailer && $retailer->getCountry() ? $retailer->getCountry()->getDialCode() : '+84',
//            'country_name' => $retailer && $retailer->getCountry() ? $retailer->getCountry()->getCountryName() : 'Vietnam',
//            'currency' => $retailer && $retailer->getCountry() ? $retailer->getCountry()->getCurrency() : 'VND',
            'retailer_status' => $retailer ? $retailer->getStatus() : ''
        );
    }

    public function createInAdvance($postUserData, $userManager)
    {
        try {
            $existedUser = $this->getEntityManager()->getRepository('CoreBundle:User')->isExistUser($postUserData['user_id']);
            if ($existedUser) {
                if ($existedUser->getStatus() != Constant::STATUS_DELETED) {
                    $result = array(
                        'status' => APIStatusCode::ITEM_EXIST_ALREADY,
                        'error' => 'User has registered already!',
                        'data' => null
                    );
                    return $result;
                }
            }

            if (array_key_exists('shop_name', $postUserData)) {
                $existedRetailer = $this->getEntityManager()->getRepository('CoreBundle:Retailer')->findOneByName(trim($postUserData['shop_name']));
                if($existedRetailer && $existedRetailer->getStatus() != Constant::STATUS_DELETED) {
                    $result = array(
                        'status' => APIStatusCode::ITEM_EXIST_ALREADY,
                        'error' => 'Shop name has registered already!',
                        'data' => null
                    );
                    return $result;
                }
            }

            $this->getEntityManager()->getConnection()->beginTransaction();
            $retailer = null;

            // Create Retailer
            $retailer = $this->getEntityManager()->getRepository('CoreBundle:Retailer')->create($postUserData);
            $postUserData['retailer'] = $retailer;
            $user = $this->create($postUserData, $userManager);

            if($user->getId())
            {
                $result = array(
                    'status' => APIStatusCode::HTTP_OK,
                    'error' => null,
                    'data' => $this->_parseRetailerUserProfiles($user, $retailer)
                );
            }
            else
            {
                $result = array(
                    'status' => APIStatusCode::INTERNAL_SERVER_ERROR,
                    'error' => 'Cannot add user!',
                    'data' => null
                );
            }
            $this->getEntityManager()->getConnection()->commit();

            return $result;
        } catch (\Exception $exc) {
            $this->getEntityManager()->getConnection()->rollback();
            $result = array(
                'status' => APIStatusCode::INTERNAL_SERVER_ERROR,
                'error' => $exc->getMessage(),
                'data' => null
            );
            return $result;
        }
    }

    public function create($postUserData, $userManager)
    {
        $user = $userManager->createUser();

        $user->setEnabled(1);
//        $user->setStatus(1);
        $user->setPlainPassword($postUserData['password']);
        $user->setUsername($postUserData['user_id']);
        $user->setAccountType(self::ACCOUNT_TYPE_RETAILER);
//        $user->setFullName($postUserData['user_full_name']);
        $user->setRetailer($postUserData['retailer']);

        $userManager->updateUser($user);

        return $user;
    }
}
